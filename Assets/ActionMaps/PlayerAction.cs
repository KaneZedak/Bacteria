//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ActionMaps/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Bacteria"",
            ""id"": ""b17fd420-7c57-40bb-961c-c36681ee4d0d"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""fdf106d7-4af7-44a7-af15-865c6e5db600"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""f0b9ef63-9947-479b-9cd1-fc8e0511cae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseInteract"",
                    ""type"": ""Button"",
                    ""id"": ""baaa09f9-f3b6-489d-9d93-88ff5b401aee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""share"",
                    ""type"": ""Button"",
                    ""id"": ""28adbc01-ce06-454f-9316-8e4e4d34fea1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sit"",
                    ""type"": ""Button"",
                    ""id"": ""5e468e4e-b037-4e81-8e29-9a0a2f536496"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""64c5cc1e-2674-4e10-9a00-820f99bf7fc8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""bddb52ad-f967-408d-9879-32cf5eac2c4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""bedd76c4-235a-4275-8a2f-7d19c5533067"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""3487118e-4544-42d5-8854-6bdfc6de447f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""cd0e8341-2cf0-4999-a821-d4208245d642"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a1640267-9e9b-415d-ba34-ce24258aca3e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d462061-37d7-446d-a620-f8088f2cf00f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc1074f2-df57-414d-b061-9ddd81ce9540"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""share"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a30166f-cea4-43d6-8a0f-6372a41d07ee"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bacteria
        m_Bacteria = asset.FindActionMap("Bacteria", throwIfNotFound: true);
        m_Bacteria_move = m_Bacteria.FindAction("move", throwIfNotFound: true);
        m_Bacteria_attack = m_Bacteria.FindAction("attack", throwIfNotFound: true);
        m_Bacteria_MouseInteract = m_Bacteria.FindAction("MouseInteract", throwIfNotFound: true);
        m_Bacteria_share = m_Bacteria.FindAction("share", throwIfNotFound: true);
        m_Bacteria_sit = m_Bacteria.FindAction("sit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bacteria
    private readonly InputActionMap m_Bacteria;
    private List<IBacteriaActions> m_BacteriaActionsCallbackInterfaces = new List<IBacteriaActions>();
    private readonly InputAction m_Bacteria_move;
    private readonly InputAction m_Bacteria_attack;
    private readonly InputAction m_Bacteria_MouseInteract;
    private readonly InputAction m_Bacteria_share;
    private readonly InputAction m_Bacteria_sit;
    public struct BacteriaActions
    {
        private @PlayerAction m_Wrapper;
        public BacteriaActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_Bacteria_move;
        public InputAction @attack => m_Wrapper.m_Bacteria_attack;
        public InputAction @MouseInteract => m_Wrapper.m_Bacteria_MouseInteract;
        public InputAction @share => m_Wrapper.m_Bacteria_share;
        public InputAction @sit => m_Wrapper.m_Bacteria_sit;
        public InputActionMap Get() { return m_Wrapper.m_Bacteria; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BacteriaActions set) { return set.Get(); }
        public void AddCallbacks(IBacteriaActions instance)
        {
            if (instance == null || m_Wrapper.m_BacteriaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BacteriaActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @attack.started += instance.OnAttack;
            @attack.performed += instance.OnAttack;
            @attack.canceled += instance.OnAttack;
            @MouseInteract.started += instance.OnMouseInteract;
            @MouseInteract.performed += instance.OnMouseInteract;
            @MouseInteract.canceled += instance.OnMouseInteract;
            @share.started += instance.OnShare;
            @share.performed += instance.OnShare;
            @share.canceled += instance.OnShare;
            @sit.started += instance.OnSit;
            @sit.performed += instance.OnSit;
            @sit.canceled += instance.OnSit;
        }

        private void UnregisterCallbacks(IBacteriaActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @attack.started -= instance.OnAttack;
            @attack.performed -= instance.OnAttack;
            @attack.canceled -= instance.OnAttack;
            @MouseInteract.started -= instance.OnMouseInteract;
            @MouseInteract.performed -= instance.OnMouseInteract;
            @MouseInteract.canceled -= instance.OnMouseInteract;
            @share.started -= instance.OnShare;
            @share.performed -= instance.OnShare;
            @share.canceled -= instance.OnShare;
            @sit.started -= instance.OnSit;
            @sit.performed -= instance.OnSit;
            @sit.canceled -= instance.OnSit;
        }

        public void RemoveCallbacks(IBacteriaActions instance)
        {
            if (m_Wrapper.m_BacteriaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBacteriaActions instance)
        {
            foreach (var item in m_Wrapper.m_BacteriaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BacteriaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BacteriaActions @Bacteria => new BacteriaActions(this);
    public interface IBacteriaActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnMouseInteract(InputAction.CallbackContext context);
        void OnShare(InputAction.CallbackContext context);
        void OnSit(InputAction.CallbackContext context);
    }
}
